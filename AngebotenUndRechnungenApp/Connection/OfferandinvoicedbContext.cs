// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Connection.Not_Mapped;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace Connection
{
    public partial class OfferandinvoicedbContext : DbContext
    {
        public OfferandinvoicedbContext()
        {
        }

        public OfferandinvoicedbContext(DbContextOptions<OfferandinvoicedbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<AddServices> AddServices { get; set; }
        public virtual DbSet<Customers> Customers { get; set; }
        public virtual DbSet<ProjectDetails> ProjectDetails { get; set; }
        public virtual DbSet<ServiceDescription> ServiceDescription { get; set; }
        public virtual DbSet<Services> Services { get; set; }
        public virtual DbSet<TypeOfReport> TypeOfReport { get; set; }
        //public virtual DbSet<ProjectDetailsVM> ProjectDetailsVM { get; set; }
        public virtual DbSet<ServiceVM> ServiceVM { get; set; }
        public virtual DbSet<GenerateReportForCustomerVM> GenerateReportForCustomerVM { get; set; }
        public virtual DbSet<GetServicesFromDbVM> GetServicesFromDbVM { get; set; }
        public virtual DbSet<CustomerInfoVM> CustomerInfoVM { get; set; }
        public virtual DbSet<GetProjectDetailsVM> GetProjectDetailsVM { get; set; }
        public virtual DbSet<GetServicesWithDescriptionVM> GetServicesWithDescriptionVM { get; set; }
        public virtual DbSet<GetAllInvoicesPricesVM> GetAllInvoicesPricesVM { get; set; }
        public virtual DbSet<GetChart2DataVM> GetChart2DataVM { get; set; }






        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Data Source=DESKTOP-L6I5FOJ\\SQLEXPRESS;Initial Catalog=OfferAndInvoiceDB;Integrated Security=True;Trusted_Connection=SSPI;Encrypt=false;TrustServerCertificate=true");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //modelBuilder.Query<ProjectDetailsVM>();
            modelBuilder.Query<ServiceVM>();
            modelBuilder.Query<GenerateReportForCustomerVM>();
            modelBuilder.Query<GetServicesFromDbVM>();
            modelBuilder.Query<CustomerInfoVM>();
            modelBuilder.Query<GetProjectDetailsVM>();
            modelBuilder.Query<GetServicesWithDescriptionVM>();
            modelBuilder.Query<GetAllInvoicesPricesVM>();
            modelBuilder.Query<GetChart2DataVM>();





            modelBuilder.Entity<AddServices>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");

                entity.Property(e => e.ProjectDetailsId).HasColumnName("ProjectDetailsID");

                entity.Property(e => e.ServiceDescriptionId).HasColumnName("ServiceDescriptionID");

                entity.HasOne(d => d.ProjectDetails)
                    .WithMany(p => p.AddServices)
                    .HasForeignKey(d => d.ProjectDetailsId)
                    .HasConstraintName("FK_AddServices_ProjectDetails");

                entity.HasOne(d => d.ServiceDescription)
                    .WithMany(p => p.AddServices)
                    .HasForeignKey(d => d.ServiceDescriptionId)
                    .HasConstraintName("FK_AddServices_ServiceDescription");
            });

            modelBuilder.Entity<Customers>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Address1).HasMaxLength(50);

                entity.Property(e => e.Address2).HasMaxLength(50);

                entity.Property(e => e.Address3).HasMaxLength(50);

                entity.Property(e => e.CustomerName).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(50);
            });

            modelBuilder.Entity<ProjectDetails>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Builder).HasMaxLength(100);

                entity.Property(e => e.CleaningLocation).HasMaxLength(100);
                entity.Property(e => e.InsertedDate).HasColumnType("datetime");


                entity.Property(e => e.ClientsId).HasColumnName("ClientsID");

                entity.Property(e => e.NoOfReferenceOrInvoice).HasMaxLength(50);

                entity.Property(e => e.ProjectName).HasMaxLength(100);

                entity.Property(e => e.TypeOfReportId).HasColumnName("TypeOfReportID");

                entity.HasOne(d => d.Clients)
                    .WithMany(p => p.ProjectDetails)
                    .HasForeignKey(d => d.ClientsId)
                    .HasConstraintName("FK_ProjectDetails_Customers");

                entity.HasOne(d => d.TypeOfReport)
                    .WithMany(p => p.ProjectDetails)
                    .HasForeignKey(d => d.TypeOfReportId)
                    .HasConstraintName("FK_ProjectDetails_TypeOfReport");
            });

            modelBuilder.Entity<ServiceDescription>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.ServiceDescription)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK_ServiceDescription_Services");
            });

            modelBuilder.Entity<Services>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ServiceName).HasMaxLength(200);
            });

            modelBuilder.Entity<TypeOfReport>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Type).HasMaxLength(50);
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}