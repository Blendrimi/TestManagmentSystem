using System;
using System.Linq;
using System.Collections;
using System.Collections.Generic;

/*

Max Number of K-Sum Pairs

You are given an integer array nums and an integer k.
Return the maximum number of pairs that add up to k.
Note: One number at one particular index can only be used once.
 

Example 1:

Input: nums = [1,2,3,4], k = 5
Output: 2
2 pairs possible : [1,4] , [2,3]

Example 2:
 
Input: nums = [3,1,3,4,3], k = 6
Output: 1
1 pair possible : [3,3] 

Example 3:

Input: nums = [3,1,3,4,1], k = 4
Output: 2
2 pair possible : [1,3], [1,3]

Example 4:
Input :[3,1,3,4,3,3,3] , k =6
Output : 2
2 pairs possible [3,3] , [3,3]

Constraints:

    1 <= nums.length <= 10^5
    1 <= nums[i] <= 10^9
    1 <= k <= 10^9

*/




class Program
{
    public static void Main(string[] args)
    {
        //int[] nums=new int[]{1,2,3,4,4,4,1};
        //int[] nums = new int[] { 3, 1, 3, 4, 3 };

        int[] nums = new int[] { 3, 1, 3, 4, 3,3,3 };
        //int[] nums = new int[] { 1, 2, 3, 4, 1 };
        int k = 6;
        Console.WriteLine(countPairs(nums, k));

    }
  
    public static int countPairs(int[] nums, int k)
    {
        int count = 0;
        List<int> list = new List<int>();
         for(int i=0;i<nums.Length;i++)
         {
            for(int j=i+1;j<nums.Length;j++)
            {
              int actual_sum=nums[i]+nums[j];
               
              int totalcount=list.Where(x=>x==j).Count();
              int totalcountI=list.Where(x=>x==i).Count();
              if(actual_sum==k && totalcount==0 && totalcountI==0)
              {
                list.Add(j);
                
                 count++;
              }
              
            }
           
         }
      
        // code here
        return count;
    }

}